# .github/workflows/ci.yml
# テスト用：パストリガーを一時的に削除

name: Go Todo CI Pipeline

# すべてのpushで実行（テスト用）
on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  # ジョブ1: Go アプリケーションのテスト・ビルド
  test-and-build:
    name: Test and Build Go App
    runs-on: ubuntu-latest

    steps:
    # 1. ソースコードをチェックアウト
    - name: Checkout code
      uses: actions/checkout@v4

    # 2. Go環境のセットアップ
    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.21'

    # 3. 依存関係のキャッシュ
    - name: Cache Go modules
      uses: actions/cache@v3
      with:
        path: |
          ~/.cache/go-build
          ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('go-todo/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-

    # 4. 依存関係のダウンロード
    - name: Download dependencies
      working-directory: ./go-todo
      run: go mod download

    # 5. 依存関係の検証
    - name: Verify dependencies
      working-directory: ./go-todo
      run: go mod verify

    # 6. コードフォーマットチェック
    - name: Check code format
      working-directory: ./go-todo
      run: |
        if [ "$(gofmt -s -l . | wc -l)" -gt 0 ]; then
          echo "Code is not formatted properly:"
          gofmt -s -l .
          exit 1
        fi

    # 7. 静的解析（vet）
    - name: Run go vet
      working-directory: ./go-todo
      run: go vet ./...

    # 8. テスト実行（今後追加予定）
    - name: Run tests
      working-directory: ./go-todo
      run: |
        echo "Tests will be added in future iterations"
        # go test -v ./...

    # 9. ビルド実行
    - name: Build application
      working-directory: ./go-todo
      run: |
        CGO_ENABLED=0 GOOS=linux GOARCH=amd64 go build \
          -ldflags='-w -s -extldflags "-static"' \
          -a -installsuffix cgo \
          -trimpath \
          -tags 'netgo osusergo' \
          -o main .

    # 10. ビルド成果物の確認
    - name: Check build artifact
      working-directory: ./go-todo
      run: |
        ls -lh main

  # ジョブ2: Docker イメージのビルド・検証
  docker-build:
    name: Build and Test Docker Image
    runs-on: ubuntu-latest
    needs: test-and-build

    steps:
    # 1. ソースコードをチェックアウト
    - name: Checkout code
      uses: actions/checkout@v4

    # 2. Docker Buildx のセットアップ
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    # 3. Dockerイメージのビルド（go-todoディレクトリから）
    - name: Build Docker image
      working-directory: ./go-todo
      run: |
        docker build -t go-todo:ci-test .

    # 4. イメージサイズの確認
    - name: Check Docker image size
      run: |
        echo "=== Docker Image Size ==="
        docker images go-todo:ci-test

    # 5. セキュリティスキャン（GitHub Action版）
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: 'go-todo:ci-test'
        format: 'table'
        exit-code: '0'  # 脆弱性があっても失敗させない（警告のみ）

    # 6. コンテナの基本テスト（データベース接続なし）
    - name: Test container basic functionality
      run: |
        echo "=== Container Basic Test ==="
        # コンテナ起動（データベース接続エラーは予想される）
        docker run --name test-container \
          -e DB_HOST=dummy \
          -e DB_PORT=5432 \
          -e DB_USER=testuser \
          -e DB_PASSWORD=testpass \
          -e DB_NAME=testdb \
          --detach \
          go-todo:ci-test || echo "Container start attempted"
        
        # 短時間待機
        sleep 3
        
        # コンテナの状態確認
        echo "Container status:"
        docker ps -a --filter name=test-container
        
        # ログ確認（エラーログも含む）
        echo "Container logs:"
        docker logs test-container 2>&1 || echo "No logs available"
        
        # クリーンアップ
        docker stop test-container 2>/dev/null || echo "Container was not running"
        docker rm test-container 2>/dev/null || echo "Container already removed"

  # ジョブ3: コード品質チェック（改良版）
  quality-check:
    name: Code Quality Check
    runs-on: ubuntu-latest

    steps:
    # 1. ソースコードをチェックアウト
    - name: Checkout code
      uses: actions/checkout@v4

    # 2. Go環境のセットアップ
    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.21'

    # 3. 依存関係をダウンロード（重要：lintツールが依存関係を必要とする）
    - name: Download dependencies
      working-directory: ./go-todo
      run: go mod download

    # 4. golangci-lint の実行（エラー処理改善版）
    - name: Run golangci-lint
      working-directory: ./go-todo
      run: |
        echo "Installing golangci-lint..."
        go install github.com/golangci/golangci-lint/cmd/golangci-lint@latest
        
        echo "Running golangci-lint..."
        golangci-lint run --timeout=5m --issues-exit-code=0 || echo "Lint issues found but continuing..."

    # 5. ファイルサイズチェック
    - name: Check file sizes
      working-directory: ./go-todo
      run: |
        echo "=== Large Files Check ==="
        find . -type f -size +1M -not -path "./.git/*" -not -path "./vendor/*" || true

    # 6. 基本的なセキュリティチェック
    - name: Basic security checks
      working-directory: ./go-todo
      run: |
        echo "=== Basic Security Checks ==="
        
        # ハードコードされたパスワードやキーのチェック
        echo "Checking for potential secrets..."
        grep -r -i "password\|secret\|key\|token" --include="*.go" . || echo "No obvious secrets found"
        
        # 危険な関数の使用チェック
        echo "Checking for potentially unsafe functions..."
        grep -r "exec\|system\|eval" --include="*.go" . || echo "No obviously unsafe functions found"
        
        echo "Basic security scan completed"

    # 7. 基本的なコード分析
    - name: Code analysis summary
      working-directory: ./go-todo
      run: |
        echo "=== Code Analysis Summary ==="
        echo "Lines of code:"
        find . -name '*.go' -not -path './vendor/*' | xargs wc -l | tail -1
        
        echo "Go files count:"
        find . -name '*.go' -not -path './vendor/*' | wc -l
        
        echo "Package dependencies:"
        go list -m all | wc -l