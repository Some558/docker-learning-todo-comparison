# Dockerfile.level1 - 即効性最適化版
# 目標: 60.3MB → 45MB

# ===== Build Stage =====
FROM golang:1.21-alpine AS builder

# 最小限のビルド用パッケージのみ
RUN apk add --no-cache \
    ca-certificates \
    tzdata \
    git && \
    rm -rf /var/cache/apk/*

WORKDIR /app

# Go modulesを先にコピー（キャッシュ最適化）
COPY go.mod go.sum ./

# 依存関係をダウンロード
RUN go mod download && go mod verify

# ソースコードをコピー
COPY . .

# 最適化されたビルド（重要な変更点）
RUN CGO_ENABLED=0 GOOS=linux GOARCH=amd64 go build \
    -ldflags='-w -s -extldflags "-static"' \
    -a -installsuffix cgo \
    -trimpath \
    -tags netgo \
    -o main .

# バイナリサイズ確認（fileコマンド削除）
RUN ls -lh main

# ===== Runtime Stage =====
FROM alpine:3.18

# セキュリティアップデート + 最小限パッケージのみ
RUN apk update && \
    apk add --no-cache \
    ca-certificates \
    wget \
    tzdata && \
    rm -rf /var/cache/apk/* /tmp/* /var/tmp/*

# 非rootユーザー作成（1行で効率化）
RUN addgroup -S appuser && adduser -S appuser -G appuser

WORKDIR /app

# 実行ファイルのみコピー
COPY --from=builder /app/main .

# ファイル権限設定（効率化）
RUN chown appuser:appuser /app/main && \
    chmod +x /app/main

USER appuser

EXPOSE 8080

# ヘルスチェック（最適化）
HEALTHCHECK --interval=30s --timeout=5s --start-period=5s --retries=2 \
    CMD wget --no-verbose --tries=1 --spider http://localhost:8080/health || exit 1

CMD ["./main"]
